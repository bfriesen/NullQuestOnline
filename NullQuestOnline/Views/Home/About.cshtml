@{
    ViewBag.Title = "About";
}

<hgroup class="page-header">
    <h1>@ViewBag.Title</h1>
    <h2 style="font-size: 1.45em;">
        NullQuest and NullQuest Online were created by <a href="http://ondrejbalas.com/">Ondrej Balas</a> and <a href="http://www.randomskunk.com/">Brian Friesen</a> for the purpose of teaching <strong>Dependency Injection</strong> in a workshop format. Both games are parodies of old roleplaying games commonly seen in the late 80s and early 90s. All source code is open source and available on <a href="https://github.com/bfriesen/NullQuest">GitHub</a>.
    </h2>
</hgroup>

<div>
    <div class="row">
        <div class="span6"><h3>Ondrej Balas</h3></div>
        <div class="span6"><h3>Brian Friesen</h3></div>
    </div>
    <div class="row">
        
        <div class="span2">
            <img src="~/img/obalas.jpg" />
            <img src="~/img/mvp.png" />
        </div>
        <div class="span4">
            Ondrej Balas is the owner of Michigan-based <strong>UseTech Design LLC</strong>, a company specializing in <a href="http://utdes.com">Custom Software Development</a> that focuses primarily on .NET and other Microsoft technologies. Ondrej is also a Microsoft MVP in C#, a writer for <a href="http://visualstudiomagazine.com/articles/list/on-vb.aspx">Visual Studio Magazine</a>, and the current president of the <a href="http://migang.org">Great Lakes Area .NET User Group</a> in Southfield, MI. <a href="http://ondrejbalas.com/about-me/">Continued...</a>
        </div>
        <div class="span2">
            <img src="~/img/bfriesen.jpg" />
            <img src="~/img/mvp.png" />
        </div>
        <div class="span4">
            Brian Friesen has been pretending to be a developer for the last 8 years and lives in constant fear of being found out. He still can't believe he received a C# MVP in 2014. As an occasional public speaker, he prefers to talk about things that are slightly out in left field. He lives near Detroit and works for <a href="http://www.quickenloans.com/">a seriously great company, quicken loans.</a></div>
    </div>
</div>

<br />
<h3>Abstracts</h3>
<article>
    <h4>Understanding Dependency Injection in .NET (All Day)</h4>
    <p>
        Your dream has come true! You just got hired in as a game developer for Bad Snowstorm Inc. They are almost ready to launch their new text-based adventure game, but their development team (Billy, the CEO’s son) is having a hard time keeping up with changing requirements. Billy never learned about interfaces or loosely coupled code, so your job will be to implement better practices that will make adding requirements faster than an avalanche.
    </p>
    <p>
        This workshop is divided into two parts. In part one, you will get an introduction to Dependency Injection through an interactive exercise. You will then inherit some tightly coupled source code, and begin refactoring in response to changing requirements. You will do this by writing your own simple “Poor man’s DI” engine, because what better way to understand what it is and how to use it than by rolling your own.
    </p>
    <p>
        In part two, we will refactor again, taking our “Poor man’s DI” engine to the next level. You will be introduced to various techniques such as constructor injection, method injection, and property injection, and their practical application into your code base. You will end the day by looking at existing frameworks like Ninject, StructureMap and Castle Windsor.
    <p>
    </p>
    You will leave this session with a solid understanding of DI, and how to use it in your current and future projects.
    </p>
</article>
<article>
    <br />
    <h4>Understanding Dependency Injection in .NET (2 Hours)</h4>
    <p>
        Your dream has come true! You just got hired in as a game developer for Bad Snowstorm Inc. They are almost ready to launch their new text-based adventure game, but their development team (Billy, the CEO’s son) is having a hard time keeping up with changing requirements. Billy never learned about interfaces or loosely coupled code, so your job will be to implement better practices that will make adding requirements faster than an avalanche.
    </p>
    <p>
        In this double-session we will be exploring Dependency Injection from several angles. Maybe the codebase you work in is an unmaintainable mess, and you want to do something about it. We can help with that. Or maybe you want to learn what exactly, DI containers such as StructureMap or Ninject do. Perhaps you just want to know if you can really trust DI containers. We can help with those too, since we’ll actually be writing a simple DI container from scratch. And maybe you’ve heard that DI makes your code more testable (spoiler: it does). In fact, DI and testability go together like peas and carrots!
    </p>
    <p>
        So join us, and unravel the mysteries of Dependency Injection as we refactor Bad Snowstorm’s new game: Null Quest.
    </p>
    <p>
        We strongly recommend (but do not absolutely require) that attendees bring a laptop to this session, as there will be follow-along examples.
    </p>
</article>